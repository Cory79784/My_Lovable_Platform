
2025-07-29T09:40:38.405918
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: app.py
1 from flask import Flask, render_template, request, jsonify
2 from models import Task
3 from database import db_session, init_db
4 
5 app = Flask(__name__)
6 
7 @app.route('/')
8 def index():
9     return render_template('index.html')
10 
11 @app.route('/tasks', methods=['GET'])
12 def get_tasks():
13     tasks = Task.query.all()
14     return jsonify([task.to_dict() for task in tasks])
15 
16 @app.route('/tasks', methods=['POST'])
17 def add_task():
18     title = request.json.get('title')
19     if title:
20         task = Task(title=title)
21         db_session.add(task)
22         db_session.commit()
23         return jsonify(task.to_dict()), 201
24     return jsonify({'error': 'Title is required'}), 400
25 
26 @app.route('/tasks/<int:task_id>', methods=['PUT'])
27 def complete_task(task_id):
28     task = Task.query.get(task_id)
29     if task:
30         task.completed = not task.completed
31         db_session.commit()
32         return jsonify(task.to_dict())
33     return jsonify({'error': 'Task not found'}), 404
34 
35 @app.route('/tasks/<int:task_id>', methods=['DELETE'])
36 def delete_task(task_id):
37     task = Task.query.get(task_id)
38     if task:
39         db_session.delete(task)
40         db_session.commit()
41         return jsonify({'message': 'Task deleted'})
42     return jsonify({'error': 'Task not found'}), 404
43 
44 if __name__ == '__main__':
45     init_db()
46     app.run(debug=True)

File: models.py
1 from sqlalchemy import Column, Integer, String, Boolean
2 from sqlalchemy.ext.declarative import declarative_base
3 
4 Base = declarative_base()
5 
6 class Task(Base):
7     __tablename__ = 'tasks'
8 
9     id = Column(Integer, primary_key=True)
10     title = Column(String, nullable=False)
11     completed = Column(Boolean, default=False)
12 
13     def to_dict(self):
14         return {
15             'id': self.id,
16             'title': self.title,
17             'completed': self.completed
18         }

File: database.py
1 from sqlalchemy import create_engine
2 from sqlalchemy.orm import scoped_session, sessionmaker
3 from models import Base
4 
5 engine = create_engine('sqlite:///todo.db')
6 db_session = scoped_session(sessionmaker(autocommit=False,
7                                          autoflush=False,
8                                          bind=engine))
9 
10 def init_db():
11     Base.metadata.create_all(bind=engine)

File: requirements.txt
1 Flask==2.0.1
2 SQLAlchemy==1.4.22

File: templates/index.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
7     <title>Todo App</title>
8 </head>
9 <body>
10     <div id="app">
11         <h1>Todo List</h1>
12         <input type="text" id="new-task" placeholder="Add a new task">
13         <button id="add-task">Add Task</button>
14         <ul id="task-list"></ul>
15     </div>
16     <script src="{{ url_for('static', filename='js/app.js') }}"></script>
17 </body>
18 </html>

File: static/css/styles.css
1 body {
2     font-family: Arial, sans-serif;
3     background-color: #f4f4f9;
4     margin: 0;
5     padding: 0;
6     display: flex;
7     justify-content: center;
8     align-items: center;
9     height: 100vh;
10 }
11 
12 #app {
13     background: white;
14     padding: 20px;
15     border-radius: 8px;
16     box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
17 }
18 
19 h1 {
20     margin: 0 0 20px;
21 }
22 
23 input[type="text"] {
24     padding: 10px;
25     width: 200px;
26     margin-right: 10px;
27     border: 1px solid #ddd;
28     border-radius: 4px;
29 }
30 
31 button {
32     padding: 10px 15px;
33     background-color: #007bff;
34     color: white;
35     border: none;
36     border-radius: 4px;
37     cursor: pointer;
38 }
39 
40 button:hover {
41     background-color: #0056b3;
42 }
43 
44 ul {
45     list-style-type: none;
46     padding: 0;
47 }
48 
49 li {
50     padding: 10px;
51     border-bottom: 1px solid #ddd;
52     display: flex;
53     justify-content: space-between;
54     align-items: center;
55 }
56 
57 li.completed {
58     text-decoration: line-through;
59     color: #888;
60 }

File: static/js/app.js
1 document.addEventListener('DOMContentLoaded', function() {
2     const taskList = document.getElementById('task-list');
3     const newTaskInput = document.getElementById('new-task');
4     const addTaskButton = document.getElementById('add-task');
5 
6     function fetchTasks() {
7         fetch('/tasks')
8             .then(response => response.json())
9             .then(tasks => {
10                 taskList.innerHTML = '';
11                 tasks.forEach(task => {
12                     const li = document.createElement('li');
13                     li.textContent = task.title;
14                     li.className = task.completed ? 'completed' : '';
15                     li.addEventListener('click', () => toggleTaskCompletion(task.id));
16                     const deleteButton = document.createElement('button');
17                     deleteButton.textContent = 'Delete';
18                     deleteButton.addEventListener('click', (e) => {
19                         e.stopPropagation();
20                         deleteTask(task.id);
21                     });
22                     li.appendChild(deleteButton);
23                     taskList.appendChild(li);
24                 });
25             });
26     }
27 
28     function addTask() {
29         const title = newTaskInput.value.trim();
30         if (title) {
31             fetch('/tasks', {
32                 method: 'POST',
33                 headers: {
34                     'Content-Type': 'application/json'
35                 },
36                 body: JSON.stringify({ title })
37             })
38             .then(response => response.json())
39             .then(() => {
40                 newTaskInput.value = '';
41                 fetchTasks();
42             });
43         }
44     }
45 
46     function toggleTaskCompletion(taskId) {
47         fetch(`/tasks/${taskId}`, {
48             method: 'PUT'
49         })
50         .then(() => fetchTasks());
51     }
52 
53     function deleteTask(taskId) {
54         fetch(`/tasks/${taskId}`, {
55             method: 'DELETE'
56         })
57         .then(() => fetchTasks());
58     }
59 
60     addTaskButton.addEventListener('click', addTask);
61     fetchTasks();
62 });

```

================================== Ai Message ==================================

```bash
#!/bin/bash

# Install dependencies
pip install -r requirements.txt

# Run the application
python app.py
```
